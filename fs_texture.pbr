#version 330 core

out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;

uniform vec3 camPos;
uniform sampler2D albedoTex;
uniform sampler2D metallicTex;
uniform sampler2D roughnessTex;
uniform sampler2D normalTex;
//uniform sampler2D aoTex;
uniform float ao;
uniform vec3 lightPoss[4];
uniform vec3 lightColors[4];

const float PI = 3.14159265359;
float pow2(float i) {
    return pow(i, 2.0);
}
float p_dot(vec3 V1, vec3 V2) {
    return max(dot(V1,V2),0.0);
}
vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalTex, TexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoords);
    vec2 st2 = dFdy(TexCoords);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}
float getD(vec3 N, vec3 H, float a) {
    //return (pow(a,4.0)) / max((PI*pow2( pow2(p_dot(N,H))*(pow(a,4.0)-1.0)+1.0 )),0.001);
    return (pow(a,2.0)) / max((PI*pow2( pow2(p_dot(N,H))*(pow(a,2.0)-1.0)+1.0 )),0.001);
}
float getG(vec3 N,vec3 V,vec3 L, float a) {
    float k_direct = pow2(a+1.0)/8.0;
    float k_ibl = pow2(a)/2.0;
    float G_NVk = (p_dot(N,V))/( p_dot(N,V)*(1-k_direct)+k_direct );
    float G_NLk = (p_dot(N,L))/( p_dot(N,L)*(1-k_direct)+k_direct );
    return G_NVk*G_NLk;
}
vec3 getF(vec3 H,vec3 V,vec3 F0) {
    return F0+(1.0-F0)*pow(1.0-clamp(dot(H,V),0.0,1.0),5.0);
}

void main() {
    vec3 N = getNormalFromMap();
    vec3 albedo = pow(texture(albedoTex,TexCoords).rgb, vec3(2.2));
    float metallic = texture(metallicTex,TexCoords).r;
    float roughness = texture(roughnessTex,TexCoords).r;
    vec3 V = normalize(camPos - WorldPos);
    vec3 L_o = vec3(0.0);
    vec3 F0 = vec3(0.04);
    F0 = mix(F0,albedo,metallic);
    for (int i = 0; i < 4; i++) {
        vec3 L = normalize(lightPoss[i]-WorldPos);
        vec3 H = normalize(V+L);
        float distance = length(lightPoss[i]-WorldPos);
        float attenuation = 1.0/pow2(distance);
        vec3 radiance = lightColors[i]*attenuation;

        vec3 F = getF(H,V,F0);
        float G = getG(N,V,L,roughness);
        float D = getD(N,H,roughness);
        vec3 DFG = D*G*F;
        float denom = 4*p_dot(N,V)*p_dot(N,L);
        vec3 specular = DFG/max(denom,0.001);
        vec3 ks = F;
        vec3 kd = vec3(1.0)-ks;
        kd *= 1.0-metallic;
        L_o += (kd*albedo/PI + specular)*radiance*p_dot(N,L);
    }
    vec3 ambient = vec3(0.03)*albedo*ao;
    vec3 color = ambient + L_o;
    color = color/(color+vec3(1.0));
    color = pow(color, vec3(1.0/2.2));
    FragColor = vec4(color,1.0);
}
