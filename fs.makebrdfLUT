#version 330 core
in vec2 TexCoords;
out vec2 FragColor;

const float PI = 3.14159265358979;
float pow2(float i) {
    return pow(i, 2.0);
}
float p_dot(vec3 V1, vec3 V2) {
    return max(dot(V1,V2),0.0);
}

float radicalInverse_VdC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley2d(uint i, uint N) {
    return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

vec3 importanceSampling(vec2 Xi, vec3 N, float roughness) {
    float a = roughness*roughness;
    float phi = 2*PI*Xi.x;
    float cosTheta = sqrt((1.0-Xi.y)/(1.0+(a*a-1.0)*Xi.y));
    float sinTheta = sqrt(1.0-cosTheta*cosTheta);
    vec3 H = vec3(cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta);
    vec3 up = abs(N.z)<0.999 ? vec3(0.0,0.0,1.0):vec3(1.0,0.0,0.0);
    vec3 tangent = normalize(cross(up,N));
    vec3 bitangent = cross(N, tangent);
    vec3 sampleVec = tangent*H.x + bitangent*H.y + N*H.z;
    return normalize(sampleVec);
}

float getG(vec3 N,vec3 V,vec3 L, float a) {
    float k_direct = pow2(a+1.0)/8.0;
    float k_ibl = pow2(a)/2.0;
    //float G_NVk = (p_dot(N,V))/( p_dot(N,V)*(1-k_direct)+k_direct );
    //float G_NLk = (p_dot(N,L))/( p_dot(N,L)*(1-k_direct)+k_direct );
    float G_NVk = (p_dot(N,V))/( p_dot(N,V)*(1-k_ibl)+k_ibl );
    float G_NLk = (p_dot(N,L))/( p_dot(N,L)*(1-k_ibl)+k_ibl );
    return G_NVk*G_NLk;
}

vec2 lookUpBRDFLUT(float NdotV, float roughness) {
    vec3 V = vec3(0.0);
    V.x = sqrt(1.0-NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;
    vec3 N = vec3(0.0,0.0,1.0);
    float A = 0.0;
    float B = 0.0;

    const uint SAMPLE_COUNT = 1024u;
    for (uint i = 0u; i<SAMPLE_COUNT; i++) {
        vec2 Xi = hammersley2d(i,SAMPLE_COUNT);
        vec3 H = importanceSampling(Xi, N, roughness);
        vec3 L = normalize(2.0*dot(V,H)*H - V);
        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V,H),0.0);
        if (NdotL>0) {
            float G = getG(N,V,L,roughness);
            float G_Vis = (G*VdotH)/(NdotH,NdotV);
            float Fc = pow(1.0-VdotH,5.0);
            A += (1.0-Fc)*G_Vis;
            B += Fc*G_Vis;
        }
    }
    A = A/SAMPLE_COUNT;
    B = B/SAMPLE_COUNT;
    return vec2(A,B);
}

void main() {
    vec2 AB = lookUpBRDFLUT(TexCoords.x, TexCoords.y);
    FragColor = AB;
}