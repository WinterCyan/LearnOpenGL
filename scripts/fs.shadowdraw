#version 330 core

in VS_OUT {
    vec2 TexCoords;
    vec3 Norm;
    vec3 FragPos;
    vec4 TransFragPos;
} fs_in;

out vec4 FragColor;

uniform sampler2D floor;
uniform sampler2D depthTexture;
uniform vec3 lightPos;
uniform vec3 viewPos;

float shadowOrNot(vec4 transFragPos, float bias) {
    vec3 pos = transFragPos.xyz / transFragPos.w; // [-1, 1]
    vec3 depthTexCoords = pos * .5 + .5;
    float fragDepth = depthTexCoords.z;
    float shadow;
    vec2 texelSize = 1.0/textureSize(depthTexture, 0);
    for (int x = -1; x <= 1; x ++){
        for (int y = -1; y <= 1; y ++) {
            float pcfDepth = texture(depthTexture, depthTexCoords.xy+vec2(x, y)*texelSize).r;
            shadow += fragDepth - bias > pcfDepth ? 1.0:0.0;
        }
    }
    shadow /= 9.;
    return shadow;
}

void main() {
    vec3 floor_color = texture(floor, fs_in.TexCoords).rgb; 
    vec3 norm = normalize(fs_in.Norm);
    vec3 lightRay = normalize(lightPos); // from origin to lightPos;
    vec3 viewRay = normalize(viewPos - fs_in.FragPos); // from fragment to viewer
    vec3 halfway = normalize(viewRay + lightRay);
    float bias = max(.05*(1-dot(norm, lightRay)), .005); 
    // ambient
    vec3 ambient_color = .1 * floor_color;
    // diffuse
    float diffuse = max(dot(norm, lightRay), .0);
    vec3 diffuse_color = diffuse * floor_color;
    // specular
    float specular = pow(dot(halfway, norm), 64.);
    vec3 specular_color = specular * floor_color;
    // total
    float shadow = shadowOrNot(fs_in.TransFragPos, bias);
    vec3 final_color = ambient_color + (1.0 - shadow) * (diffuse_color + specular_color);
    FragColor = vec4(final_color, 1.0);
}
