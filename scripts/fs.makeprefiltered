#version 330 core
in vec3 localPos;
out vec4 FragColor;
uniform samplerCube envMap;
uniform float roughness;

const float PI = 3.14159265358979;
float radicalInverse_VdC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley2d(uint i, uint N) {
    return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

vec3 importanceSampling(vec2 Xi, vec3 N, float roughness) {
    float a = roughness*roughness;
    float phi = 2*PI*Xi.x;
    float cosTheta = sqrt((1.0-Xi.y)/(1.0+(a*a-1.0)*Xi.y));
    float sinTheta = sqrt(1.0-cosTheta*cosTheta);
    vec3 H = vec3(cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta);
    vec3 up = abs(N.z)<0.999 ? vec3(0.0,0.0,1.0):vec3(1.0,0.0,0.0);
    vec3 tangent = normalize(cross(up,N));
    vec3 bitangent = cross(N, tangent);
    vec3 sampleVec = tangent*H.x + bitangent*H.y + N*H.z;
    return normalize(sampleVec);
}

void main() {
    vec3 N = normalize(localPos);
    vec3 R=N;
    vec3 V=R;
    const uint SAMPLE_COUNT = 1024u;
    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;

    for (uint i = 0u; i<SAMPLE_COUNT; i++) {
        vec2 Xi = hammersley2d(i, SAMPLE_COUNT);
        vec3 H = importanceSampling(Xi, N, roughness);
        vec3 L = normalize(2.0*dot(V,H)*H - V); // reflect V by H
        float NdotL = max(dot(N,L),0.0);
        if (NdotL > 0) {
            prefilteredColor += texture(envMap, L).rgb * NdotL;
            totalWeight += NdotL;
        }
    }
    prefilteredColor = prefilteredColor/totalWeight;
    //FragColor = vec4(prefilteredColor, 1.0);
    FragColor = vec4(texture(envMap,N).rgb,1.0);
}