#version 330 core
layout (location=0) in vec3 aPos;
layout (location=1) in vec3 aNorm;
layout (location=2) in vec2 aTexCoords;
layout (location=3) in vec3 aT;
layout (location=4) in vec3 aB;
uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;
uniform vec3 viewPos;
uniform vec3 lightPos;
out VS_OUT {
    vec2 TexCoords;
    vec3 FragPosInTBN;
    vec3 viewPosInTBN;
    vec3 lightPosInTBN;
} vs_out;
void main(){
    vec3 FragPos = vec3(model * vec4(aPos, 1.0));
    vs_out.TexCoords = aTexCoords;
    mat3 normTransMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(normTransMatrix * aT);
    vec3 N = normalize(normTransMatrix * aNorm);
    T = normalize(T - dot(T,N)*N);
    vec3 B = cross(N,T);
    mat3 reverseTBN = transpose(mat3(T,B,N));
    vs_out.FragPosInTBN = reverseTBN * FragPos;
    vs_out.viewPosInTBN = reverseTBN * viewPos;
    vs_out.lightPosInTBN = reverseTBN * lightPos;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
