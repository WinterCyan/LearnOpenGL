#version 330 core
in vec2 TexCoords;
uniform sampler2D position_texture;
uniform sampler2D normal_texture;
uniform sampler2D albedo_texture;
uniform vec3 viewPos;
struct Light {
    vec3 Pos;
    vec3 Color;
    float Linear;
    float Quadratic;
};
const int LIGHT_NUM = 32;
uniform Light lights[LIGHT_NUM];
out vec4 FragColor;

void main() {
    const float gamma = 2.2;
    vec3 position = texture(position_texture, TexCoords).rgb;
    vec3 normal = texture(normal_texture, TexCoords).rgb;
    vec3 albedo = texture(albedo_texture, TexCoords).rgb;
    vec3 viewDir = normalize(viewPos - position);
    float specular = texture(albedo_texture, TexCoords).a;
    vec3 ambient_color = .2 * albedo;
    vec3 diffuse_color = vec3(0.0);
    vec3 specular_color = vec3(0.0);
    for (int i = 0; i < LIGHT_NUM; i ++) {
        vec3 lightDir = normalize(lights[i].Pos - position);
        vec3 halfwayDir = normalize(lightDir + viewDir);
        vec3 inner_diffuse_color = max(dot(lightDir, normal), 0.0) * lights[i].Color * albedo;
        vec3 inner_specular_color = pow(max(dot(halfwayDir, normal), 0.0), 16.0) * lights[i].Color * specular;
        float distance = length(lights[i].Pos - position);
        float attenuation = 1.0 / (1.0 + lights[i].Linear*distance + lights[i].Quadratic*distance*distance);
        inner_diffuse_color *= attenuation;
        inner_specular_color *= attenuation;
        diffuse_color += inner_diffuse_color;
        specular_color += inner_specular_color;
    }
    vec3 final_color = ambient_color + diffuse_color + specular_color;
    FragColor = vec4(final_color, 1.0);
}
