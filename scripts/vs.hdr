#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNorm;
layout (location = 2) in vec2 aTexCoords;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform bool inverse_norm;
out VS_OUT {
    vec2 TexCoords;
    vec3 Norm;
    vec3 FragPos;
} vs_out;
void main() {
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    vec3 normal = inverse_norm ? -aNorm : aNorm;
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Norm = normalize(normalMatrix * normal);
    vs_out.TexCoords = aTexCoords;
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));
}
