#version 330 core

in VS_OUT {
    vec2 TexCoords;
    vec3 Norm;
    vec3 FragPos;
} fs_in;

out vec4 FragColor;

uniform sampler2D floor;
uniform samplerCube depthTexture;
uniform vec3 lightPos;
uniform vec3 viewPos;

float shadowOrNot(vec3 fragPos, float bias) {
    vec3 lightToFrag = fragPos - lightPos;
    float min_depth = texture(depthTexture, lightToFrag).r;
    min_depth *= 25.0;
    float curr_depth = length(lightToFrag);
    return curr_depth - bias > min_depth ? 1.0 : 0.0;
}

void main() {
    vec3 floor_color = texture(floor, fs_in.TexCoords).rgb; 
    vec3 norm = normalize(fs_in.Norm);
    vec3 lightRay = normalize(lightPos - fs_in.FragPos); // from fragment to lightPos;
    vec3 viewRay = normalize(viewPos - fs_in.FragPos); // from fragment to viewer
    vec3 halfway = normalize(viewRay + lightRay);
    float bias = max(.05*(1-dot(norm, lightRay)), .005); 
    // ambient
    vec3 ambient_color = .1 * floor_color;
    // diffuse
    float diffuse = max(dot(norm, lightRay), .0);
    vec3 diffuse_color = diffuse * floor_color;
    // specular
    float specular = pow(dot(halfway, norm), 64.);
    vec3 specular_color = specular * floor_color;
    // total
    float shadow = shadowOrNot(fs_in.FragPos, bias);
    //vec3 final_color = ambient_color + (1.0 - shadow) * (diffuse_color + specular_color);
    //vec3 final_color = ambient_color + diffuse_color + specular_color;
    vec3 final_color = ambient_color * 10.;
    FragColor = vec4(final_color, 1.0);
}
